# -*- coding: utf-8 -*-
"""Starbucks_Coffee_cup_prediction_MLR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Qx7FYP_JGH5I5QSTA0EFbuXlU3UwWxz
"""

import pandas as pd
import numpy as np

df_starbucks = pd.read_excel('/content/Starbucks data.xlsx')

df_starbucks.shape

df_starbucks.head()

df_starbucks.isnull().sum()

df_starbucks.duplicated().sum()

df_starbucks.info()

Q1 = df_starbucks.quantile(0.25)
Q3 = df_starbucks.quantile(0.75)
IQR = Q3 - Q1

# Identify outliers
outliers = ((df_starbucks < (Q1 - 1.5 * IQR)) | (df_starbucks > (Q3 + 1.5 * IQR))).any(axis=1)

# Print the rows with outliers
print("Rows with outliers:")
print(df_starbucks[outliers])

df_starbucks_cleaned = df_starbucks[~outliers]

print("Shape of the original DataFrame:", df_starbucks.shape)
print("Shape of the DataFrame after removing outliers:", df_starbucks_cleaned.shape)

df_starbucks_cleaned.head()

import seaborn as sns
import matplotlib.pyplot as plt

# Calculate the correlation matrix
correlation_matrix = df_starbucks_cleaned.corr()

# Get correlations with the target variable 'Cups of Coffee per day'
target_correlation = correlation_matrix['Cups of Coffee per day'].sort_values(ascending=False)

# Print the correlations with the target variable
print("Correlation with 'Cups of Coffee per day':")
print(target_correlation)

# Plot the correlation heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Define features (X) and target (y)
X = df_starbucks_cleaned.drop('Cups of Coffee per day', axis=1)
y = df_starbucks_cleaned['Cups of Coffee per day']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Multiple Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

model.predict([[25, 30, 12, 35]])

# import joblib
# joblib.dump(model, 'linear_regression_model.pkl')
# print("Model saved as linear_regression_model.pkl")